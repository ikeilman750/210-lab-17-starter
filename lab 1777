#include <iostream>
using namespace std;

const int SIZE = 7;

struct Node {
    float value;
    Node* next;
};

// Function prototypes
void addNodeToFront(Node*& head, float value);
void addNodeToTail(Node*& head, float value);
void deleteNode(Node*& head, int position);
void insertNode(Node*& head, int position, float value);
void deleteEntireList(Node*& head);
void output(Node* head);

int main() {
    Node* head = nullptr;
    int count = 0;

    // create a linked list of size SIZE with random numbers 0-99
    for (int i = 0; i < SIZE; i++) {
        int tmp_val = rand() % 100;
        addNodeToFront(head, tmp_val); // adds node at head
    }
    output(head);

    // deleting a node
    Node* current = h ead;
     cout <<"Which node to delete? " << endl;
    output(head);
    int entry;
    cout  << "Choice --> ";
    cin >> entry;

    // traverse that many times and delete that node
    deleteNode(head,  entry) ;
    output(head);

    // insert a node
    current = head;
    cout << "After which node to insert 10000? " << endl;
    count = 1;
    while (current) {
        cout << "[" << count++ << "] " << current->value << endl;
        current = current->next;
    }
    cout << "Choice --> ";
    cin >> entry ;

    insertNode(head, entry, 10000);
    output(head);

    // deleting the linked list
    deleteEntireList(head);;
    output(head);

    return 0;
}

void addNodeToFront(Node*& head, float value) {
    Node* newVal = new Node;
    newVal->value = value;
    newVal->next  = head;
    head = newVal;
}

void addNodeToTail(Node*& head, float value) {
    Node* newVal = new Node;
    newVal->value = value;
    newVal->next = nullptr;

    if (!head) {
        head = newVal;
        return;
    }

    Node* current = head;
    while (current->next) {
        current = current->next;
    }
    current->next = newVal;
}

void deleteNode(Node*& head, int position) {
    if (!head || position < 1) return;

    Node* current = head;
    Node* prev = nullptr;

    if (position == 1) {
        head = current>next;
        delete current;
        return;
    }

    for (int i = 1; current && i < position; i++) {
        prev = current;
        current = current->next;
    }

    if (current) {
        prev->next = current->next;
        delete current;
    }
}

void insertNode(Node*& head, int position, float value) {
    Node* newnode = new Node;
    newnode->value = value;

    if (position == 1) {
        newnode->next = head;
        head = newnode;
        return;
    }

    Node* current = head;
    Node* prev = nullptr;

    for (int i = 1; current && i < position; i++) {
        prev = current;
        current = current->next;
    }

    newnode->next = current;
    if (prev) {
        prev->next = newnode;
    }
}

void deleteEntireList(Node*& head) {
    Node* current= head;
    while (current) {
        head = current->next;
        delete current;
        current = head;
    }
    head = nullptr;
}

void output(Node* head) {
    if (!head) {
        cout << "Empty list.\n";
        return;
    }

    int count = 1;
    Node* current = head;
    while (cu
        cout << "[" << count++ << "] " << current->value << endl;
        current = current->next;
    }
    cout << endl;
}
